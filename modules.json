data = '[ \
	{"name" : "ReadWikipedia", "params" : "wiki_directory(directory,tip=Directory where wikipedia files are stored);pattern(string=*,tip=What to look for in Wikipedia articles);categories(string=*,tip=What categories if any?);out_file(text,out);titles_file(text,out)", "tip" : "Extracts text from Wikipedia dump", "category" : "Wikipedia"}, \
	{"name" : "SplitSentences", "params" : "input(text,in);output(text,out)", "tip" : "Break up a text file so that each sentence is on a separate line", "category" : "Text"}, \
	{"name" : "Seq2Seq_Train", "params" : "all_data(text,in,tip=x and y data.);x(text,in);y(text,in);model(model,out);dictionary(out,dictionary);layers(int=2,tip=Number of layers in neural net);hidden_nodes(int=1024,tip=Number of nodes in each layer of the network);epochs(int=10)", "tip" : "Train a Seqence2Sequence network for translation or prediction", "category" : "no"}, \
	{"name" : "Seq2Seq_Train_More", "params" : "all_data(text,in,tip=x and y data.);x(text,in);y(text,in);model_in(model,in);dictionary(in,dictionary);layers(int=2,tip=Number of layers in neural net);hidden_nodes(int=1024,tip=Number of nodes in each layer of the network);epochs(int=10);model_out(model,out)", "tip" : "Train a Seqence2Sequence network for translation or prediction", "category" : "no"}, \
	{"name" : "Seq2Seq_Run", "params" : "data(in,text);model(model,in);dictionary(in,dictionary);layers(int=2);hidden_nodes(int=1024);stop(string);output(out,text)", "tip" : "Run a Sequence2sequence neural network for translation or prediction", "category": "no"}, \
	{"name" : "MakeTrainTestData", "params" : "data(text,in);training_percent(int=90);training_data(out,text);testing_data(out,text)", "tip" : "Split up a text file into chunks for training and testing", "category" : "no"}, \
	{"name" : "MakeXYTrainTestData", "params" : "data_x(in,text);data_y(in,text);training_percent(int=90,tip=What percentage of the data should be in the training dataset);training_x_data(out,text);training_y_data(out,text);testing_x_data(out,text);testing_y_data(out,text)", "tip" : "Split up a text file into four chunks for training Sequence2Sequence", "category" : "no"}, \
	{"name" : "RemoveEmptyLines", "params" : "input(text,in);output(text,out)", "tip" : "Remove empty lines from a text file", "category" : "Text"}, \
	{"name" : "StripLines", "params" : "input(text,in);output(text,out)", "tip" : "Remove whitespace from the beginning and end of every line in a text file", "category" : "Text"}, \
	{"name" : "ReplaceCharacters", "params" : "input(text,in);output(text,out);find(string,tip=Look for this subsequence);replace(string,tip=Replace the subsequence with this one)", "tip" : "Replace any sequence of characters with another (possibly empty) sequence", "category" : "Text"}, \
	{"name" : "CharRNN_Train", "params" : "data(in,text);history(int=35,tip=How many characters to keep in memory);layers(int=2,tip=Number of layers in the neural network);hidden_nodes(int=512,tip=Number of nodes in each layer of the neural network);epochs(int=50);learning_rate(float=0.0001);model(out,model);dictionary(out,dictionary)", "tip" : "Train a word-RNN neural network on text", "category" : "RNN"}, \
	{"name" : "CharRNN_Train_More", "params" : "model_in(in,model);history(int=35,tip=How many words to keep in memory);epochs(int=50);learning_rate(float=0.0001);model_out(out,model)", "tip" : "Continue training a word-RNN neural network on text", "category" : "RNN"}, \
	{"name" : "CharRNN_Run", "params" : "model(in,model);dictionary(in,dictionary);seed(in,text);steps(int=600,tip=Number of characters to generate);temperature(float=0.5,tip=Amount of riskiness of generation--0.0 to 1.0);output(text,out)", "tip" : "Run a character-RNN neural network on text", "category" : "RNN"}, \
	{"name" : "WordRNN_Train", "params" : "data(in,text);history(int=35,tip=How many words to keep in memory);layers(int=2,tip=Number of layers in the neural network);hidden_nodes(int=512,tip=Number of nodes in each layer of the neural network);epochs(int=50);learning_rate(float=0.0001);model(out,model);dictionary(out,dictionary)", "tip" : "Train a word-RNN neural network on text", "category" : "RNN"}, \
	{"name" : "WordRNN_Train_More", "params" : "model_in(in,model);history(int=35,tip=How many words to keep in memory);epochs(int=50);learning_rate(float=0.0001);model_out(out,model)", "tip" : "Continue training a word-RNN neural network on text", "category" : "RNN"}, \
	{"name" : "WordRNN_Run", "params" : "model(in,model);dictionary(in,dictionary);seed(in,text);steps(int=600,tip=Number of characters to generate);temperature(float=0.5,tip=Amount of riskiness of generation--0.0 to 1.0);output(text,out)", "tip" : "Run a character-RNN neural network on text", "category" : "RNN"}, \
	{"name" : "ReadTextFile", "params" : "file(directory,tip=Filename);output(text,out)", "tip" : "Read a text file", "category" : "File"}, \
	{"name" : "WriteTextFile", "params" : "input(in,text);file(directory,tip=Filename)", "tip" : "Write to a text file", "category" : "File"}, \
	{"name" : "SplitLines", "params" : "input(in,text);output1(out,text);output2(out,text);character(string,tip=Split line when this character shows up)", "tip" : "Break any line into two lines when a particular character is seen", "category" : "Text"}, \
	{"name" : "MakePredictionData", "params" : "data(in,text);x(out,text);y(out,text)", "tip" : "Prepare data for prediction--each line will try to predict the next line", "category" : "no"}, \
	{"name" : "ConcatenateTextFiles", "params" : "input_1(in,text);input_2(in,text);output(out,text)", "tip" : "Merge two text files", "category" : "Text"}, \
	{"name" : "RandomSequence", "params" : "input(in,text);length(int=25,tip=Length of random sequence);output(out,text)", "tip" : "Pick a random sequence of a certain length from a text file", "category" : "Text"}, \
	{"name" : "MakeString", "params" : "string(string,tip=Enter a string);output(out,text)", "tip" : "Write a single string to a text file", "category" : "Input"}, \
	{"name" : "UserInput", "params" : "prompt(string,tip=Pring this prompt);output(out,text)", "tip" : "Prompt user for a string", "category" : "Input"}, \
	{"name" : "DCGAN_Train", "params" : "input_images(images,in);epochs(int=10);input_height(int=108);output_height(int=108);filetype(string=jpg);model(out,model);animation(out,image)", "tip" : "Train a generateive adversarial network to make images", "category" : "no"}, \
	{"name" : "DCGAN_Run", "params" : "input_images(images,in);model(in,model);input_height(int=108);output_height(int=108);filetype(string=jpg);output_image(out,image)", "tip" : "Generate an image from a generative adversarial network", "category" : "no"}, \
	{"name" : "ReadImages", "params" : "data_directory(directory);output_images(out,images)", "tip" : "Read in a directory of image files", "category" : "File"}, \
	{"name" : "WriteImages", "params" : "input_images(in,images);output_directory(directory)", "tip" : "Save a group of images to a directory", "category" : "File"}, \
	{"name" : "PickFromWikipedia", "params" : "wiki_directory(directory,tip=Directory where wikipedia files are stored);input(in,text);catgories(string=*,tip=What categories if any?);section_name(string,tip=What section to pull text from if any);output(out,text);break_sentences(bool=false,tip=Should text be broken into one sentence per line?)", "tip" : "Pull text from wikipedia for the articles specified (file with one title per line)", "category" : "Wikipedia"}, \
	{"name" : "RandomizeLines", "params" : "input(in,text);output(out,text)", "tip" : "Randomize lines in a text file", "category" : "Text"}, \
	{"name" : "RemoveTags", "params" : "input(in,text);output(out,text)", "tip" : "Remove XML and HTML tags from a text file", "category" : "HTML"}, \
	{"name" : "MakeLowercase", "params" : "input(in,text);output(out,text)", "tip" : "Make all text in a file lowercase", "category" : "Text"}, \
	{"name" : "Wordify", "params" : "input(in,text);output(out,text)", "category" : "Text"}, \
	{"name" : "CleanText", "params" : "input(in,text);output(out,text)", "category" : "Text"}, \
	{"name" : "KeepFirstLine", "params" : "input(in,text);output(out,text)", "tip" : "Delete everything except the first line of text", "category" : "Text"}, \
	{"name" : "DeleteFirstLine", "params" : "input(in,text);output(out,text)", "tip" : "Delete the first line of text", "category" : "Text"}, \
	{"name" : "DeleteLastLine", "params" : "input(in,text);output(out,text)", "tip" : "Delete the last line of text", "category" : "Text"}, \
	{"name" : "SaveModel", "params" : "model(in,model);file(string,tip=Name of the model file)", "tip" : "Save a neural network model", "category" : "File"}, \
	{"name" : "LoadModel", "params" : "file(string,tip=Name of the model file);model(out,model)", "tip" : "Load a neural network model", "category" : "File"}, \
	{"name" : "SaveDictionary", "params" : "dictionary(in,dictionary);file(string,tip=Name of dictionary file)", "tip" : "Save a neural network dictionary", "category" : "File"}, \
	{"name" : "LoadDictionary", "params" : "file(string,tip=Name of dictionary file);dictionary(out,dictionary)", "tip" : "Load a neural network dictionary", "category" : "File"}, \
	{"name" : "Repeat", "params" : "input(in,text);output(out,text);times(int)", "category" : "Do not use"}, \
	{"name" : "ReadFromWeb", "params" : "url(string,tip=URL of webpage to download);data(out,text)", "tip" : "Download a webpage", "category" : "Do not use"}, \
	{"name" : "ReadAllFromWeb", "params" : "urls(in,text);data(out,text)" , "tip" : "Download many web pages, each url in a file on a separate line", "category" : "Do not use"}, \
	{"name" : "KeepLineWhen", "params" : "input(in,text);match(string,tip=keep lines with this string);output(out,text)", "tip" : "Throw out any lines of text that do not contain a specified string", "category" : "Text"}, \
	{"name" : "KeepLineUnless" , "params" : "input(in,text);match(string,tip=keep lines that do not contain this string);output(out,text)", "tip" : "Throw out any lines of text that have a specified string", "category" : "Text"}, \
	{"name" : "MakeCountFile", "params" : "num(int=10,tip=Count up to this number);prefix(string,tip=Text before the number);postfix(string,tip=Text after the number);output(out,text)", "tip" : "Make a text file where each line has a number on it, counting up", "category" : "Utils"}, \
	{"name" : "SplitHTML" , "params" : "input(in,text);output(out,text)", "tip" : "Break up a file so each line contains a single HTML tag", "category" : "HTML"}, \
	{"name" : "Regex_Search", "params" : "input(in,text);expression(string,tip=Regular expression);output(out,text);group_1(out,text);group_2(out,text)", "tip" : "Search for all sequences that match a regular expression", "category" : "Regex"}, \
	{"name" : "Regex_Sub", "params" : "input(in,text);expression(string,tip=Regular expression);replace(string,tip=Replace match with this);output(out,text)", "category" : "Regex"}, \
	{"name" : "StyleNet_Train", "params" : "style_image(in,image);test_image(in,image);epochs(int=2,tip=how long to run);model(out,model);animation(out,image)", "tip" : "Draw the target image in the style of the style image", "category" : "no"}, \
	{"name" : "StyleNet_Run", "params" : "model(in,model);target_image(in,image,tip=Image to stylize);output_image(out,image)", "tip" : "Apply a style learned by a neural net to an image", "category" : "no"}, \
	{"name" : "ReadImageFile", "params" : "file(string,tip=Name of image file to read in);output(out,image)", "tip" : "Read an image file in", "category" : "File"}, \
	{"name" : "WriteImageFile", "params" : "input(in,image);file(string,tip=Name of image file to write to)", "tip" : "Write an image to file", "category" : "File"}, \
	{"name" : "Sort", "params" : "input(in,text);output(out,text)", "tip" : "Sort text lines alphanumerically", "category" : "Text"}, \
	{"name" : "Reverse", "params" : "input(in,text);output(out,text)", "tip" : "Reverse the order of text lines", "category" : "Text"}, \
	{"name" : "MakeEmptyText", "params" : "output(out,text)", "tip" : "Create an empty text file", "category" : "Utils"}, \
	{"name" : "PrintText", "params" : "input(text,in)", "tip" : "Print text file", "category" : "Utils"} \
]';